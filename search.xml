<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[NPM概述]]></title>
    <url>%2F2018%2F10%2F19%2Fnpm%E6%A6%82%E8%BF%B0%2F</url>
    <content type="text"><![CDATA[npm1 npm 的两层含义 NPM 是一个 第三方模块的托管网站，指的就是https://www.npmjs.com/； NPM 是Node的包管理工具（全名叫做 Node package manager），在我们安装Node时候，就已经顺便也安装了 NPM 这个管理工具； 2 安装和卸载全局包（i5ting_toc）把md文件转换为html文件 什么是全局的包：安装到计算机全局环境中的包，叫做全局包；安装的全局包可以在当前电脑的任何目录下，直接通过命令行来访问； 如何安装全局包：运行 npm install 包名 -g 即可；其中 -g 参数，表示 把包安装到全局目录中的意思； 全局包的安装目录：C:\Users\用户目录\AppData\Roaming\npm 什么样的包适合安装到全局：工具性质的包，适合安装到全局； 如何卸载全局包：要卸载某个全局的包，直接运行npm uninstall 包名 -g即可；其中 uninstall 表示卸载的意思； 3 安装和卸载本地包 什么是本地的包：跟着项目安装的包，叫做本地包；本地包都会被安装到 node_modules 目录下； 注意：如果拿到一个空项目，必须在当前项目根目录中，先运行 npm init或者npm init -y 命令，初始化一个package.json的配置文件，否则包无法安装到本地项目中； 如何安装本地包：运行npm i 包名 --save 即可安装本地包；都安装到了当前项目的 node_modules目录下； 如果大家用的是npm 5.x的版本，可以不指定--save命令，如果用的是 npm 3.x 的版本，则需要手动指定 --save； package-lock.json文件中记录了曾经装过的包的下载地址，方便下次直接下载包，能够加快装包的速度，提升装包的体验； 如何卸载本地包：使用 npm uninstall/remove 包名 -S/-D即可卸载指定的本地包； 4 其它常用命令 --save 的缩写是 -S --save-dev的缩写是 -D开发时候使用 install 的缩写是 i 注意：dependencies 节点，表示项目上线部署时候需要的依赖项；devDependencies节点，表示项目在开发阶段需要的依赖项，但是当项目要部署上线了，devDependencies节点中的包，就不再需要了！ 注意：当使用 npm i快速装包的时候，npm会检查package.json文件中，所有的依赖项，然后都为我们安装到项目中 --production 表示只安装 dependencies 节点下，记录的包，不安装devDependencies节点下的包；当项目要上线了，才会使用--production命令 5 解决 npm 下载慢问题 默认，NPM在下载包的时候，连接的是国外的服务器，所以，有时候如果网速不是特别好，可能下载不下来包；此时，大家可以全局安装一个的工具，叫做 cnpm 如何安装cnpm：运行 npm i cnpm -g 即可； 如何使用cnpm：在装包的时候，只需要把 npm 替换成 cnpm 即可，例如： 使用 npm 安装 jquery：运行 npm i jquery -S 使用 cnpm 安装 jquery： 运行 cnpm i jquery -S]]></content>
      <categories>
        <category>node.js</category>
      </categories>
      <tags>
        <tag>npm</tag>
        <tag>nodejs</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue生命周期]]></title>
    <url>%2F2018%2F10%2F19%2Fvue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%2F</url>
    <content type="text"><![CDATA[vue实例的生命周期概念：每一个Vue实例创建、运行、销毁的过程，就是生命周期；在实例的生命周期中，总是伴随着各种事件，这些事件就是生命周期函数； 什么是生命周期（每个实例的一辈子）生命周期：实例的生命周期，就是一个阶段，从创建到运行，再到销毁的阶段；(https://cn.vuejs.org/v2/guide/instance.html#实例生命周期)生命周期函数：在实例的生命周期中，在特定阶段执行的一些特定的事件，这些事件，叫做 生命周期函数； 生命周期钩子：就是生命周期事件的别名而已； 生命周期钩子 = 生命周期函数 = 生命周期事件 主要的生命周期函数分类 创建期间的生命周期函数：(特点：每个实例一辈子只执行一次) beforeCreate：创建之前，此时 data 和 methods 尚未初始化 created(第一个重要的函数，此时，data 和 methods 已经创建好了，可以被访问了) beforeMount：挂载模板结构之前，此时，页面还没有被渲染到浏览器中； mounted（第二个重要的函数，此时，页面刚刚被渲染出来；如果要操作DOM元素，最好在这个阶段） 运行期间的生命周期函数：（特点：按需被调用 至少0次，最多N次） beforeUpdate：数据是最新的，页面是旧的 updated：页面和数据都是最新的 销毁期间的生命周期函数：(特点：每个实例一辈子只执行一次) beforeDestroy：销毁之前，实例还正常可用 destroyed：销毁之后，实例已经不工作了]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue品牌管理案例]]></title>
    <url>%2F2018%2F10%2F18%2Fvue%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86%E6%A1%88%E4%BE%8B%2F</url>
    <content type="text"><![CDATA[品牌管理案例 添加新品牌删除品牌根据条件筛选品牌 1.x 版本中的 filterBy 指令，在 2.x 中已经被废除：filterBy - 指令 12345678&lt;tr v-for="item in list | filterBy searchName in 'name'"&gt; &lt;td&gt;&#123;&#123;item.id&#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123;item.ctime&#125;&#125;&lt;/td&gt; &lt;td&gt; &lt;a href="#" @click.prevent="del(item.id)"&gt;删除&lt;/a&gt; &lt;/td&gt;&lt;/tr&gt; 在 2.x 版本中手动实现筛选的方式： 筛选框绑定到 VM 实例中的 searchName 属性： 12&lt;hr&gt; 输入筛选名称：&lt;input type="text" v-model="searchName"&gt; 在使用 v-for 指令循环每一行数据的时候，不再直接 item in list，而是 in 一个 过滤的 methods 方法，同时，把过滤条件searchName传递进去： 12345678910&lt;tbody&gt; &lt;tr v-for="item in search(searchName)"&gt; &lt;td&gt;&#123;&#123;item.id&#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123;item.ctime&#125;&#125;&lt;/td&gt; &lt;td&gt; &lt;a href="#" @click.prevent="del(item.id)"&gt;删除&lt;/a&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; search 过滤方法中，使用 数组的 filter 方法进行过滤： 12345search(name) &#123; return this.list.filter(x =&gt; &#123; return x.name.indexOf(name) != -1; &#125;);&#125;]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Node.js中模块和包的概念]]></title>
    <url>%2F2018%2F10%2F17%2Fnodejs%E4%B8%AD%E6%A8%A1%E5%9D%97%E5%92%8C%E5%8C%85%E7%9A%84%E6%A6%82%E5%BF%B5%2F</url>
    <content type="text"><![CDATA[Node.js 中 模块 和 包 的概念Node.js 由三部分组成：ECMAScript 核心 + 全局成员 + 模块成员 模块成员，根据一些区别，又可以分为三大类： 核心模块、第三方模块、用户自定义模块 1 模块成员的分类1.1 核心模块 什么是核心模块： 随着 Node.js 的安装包，一同安装到本地的模块，叫做核心模块； 例如：fs，path等模块，都是由 Node.js 官方提供的核心模块； 只要大家在计算机中，安装了 Node 这个应用程序，那么，我们的计算机中就已经安装了所有的 核心模块； 如何使用核心模块：require(&#39;核心模块标识符&#39;) 2.2 第三方模块 什么是第三方模块： 一些非官方提供的模块，叫做第三方模块； 注意，第三方模块，并不在我们的计算机上； 如果大家需要使用某些第三方模块，必须去一个叫做 NPM 的网站上搜索并下载才能使用； 如何使用第三方模块： 先从 npm 官网上下载指定的第三方模块 使用 require(&#39;第三方模块的名称标识符&#39;)来导入这个模块 根据 第三方模块的 官方文档，尝试使用 2.3 用户自定义模块 什么是用户模块： 程序员在自己项目中写的 Javascript 文件，就叫做 用户自定义模块； 如何使用用户模块：require(&#39;路径标识符&#39;) 2 包的定义和使用2.1 什么是 英文名叫做 Packages，包是在模块基础上更深一步的抽象； 包的目的：方便分发和推广基于 CommonJS 规范实现的 应用程序 或 类库； 包可以看作是 模块、代码 和 其它资源 组合起来形成的 独立作用域； 相当于一个入口文件，整合了其他模块,整合资源，向外暴露 2.2 规范的包结构 包都要以一个单独的目录而存在； package.json 必须在包的顶层目录下； package.json 文件必须符合 JSON 格式，并且必须包含如下三个属性：name, version, main name: 包的名字 version: 包的版本号 main: 表示包的入口文件 二进制文件应该在bin 目录下;javaScript 代码应该在lib 目录下; 文档应该在doc 目录下;单元测试应该在test 目录下; Node.js 对包要求并没有那么严格，只要顶层目录下有package.json，并符合基本规范即可; 2.3 包描述文件 package.json【了解】1234567891011name：包的名称，必须是唯一description：包的简要说明version：符合语义化版本识别规范的版本字符串keywords：关键字数据，通常用于搜索maintainers：维护者数组，每个元素要包含name、email、web可选字段contributors：贡献者数组，格式与maintainers相同。包的坐着应该是贡献者数据的第一个元素bugs：提交bug的地址，可以是网址或者电子邮件地址licenses：许可证数组，每个元素要包含type和url字段repositories：仓库托管地址数组，每个元素要包含type、url和path字段dependencies：包的依赖，一个关联数组，由包名称和版本号组成。devDependencies：开发依赖项，表示一个包在开发期间用到的依赖项 模块作用域 和 全局作用域 在Node.js中有两个作用域，分别是 全局作用域 和 模块作用域； 全局作用域使用 global 来访问，类似于浏览器中的window； 每个 Javascript 文件，都是一个单独模块，每个模块都有自己独立的作用域，因此：模块中的成员，默认无法被其它模块访问。 1 使用 global 全局作用域在模块之间共享成员 如果在某个模块内部，想为 全局的 global 作用域挂载一些属性，需要显示的调用global.***来挂载； 注意：在开发中，一般情况下，不推荐使用global全局作用域来共享成员，会存在全局变量污染问题； 2 模块作用域 module（模块标识） module 属性是 Common JS 规范中定义的，它是一个对象，表示当前这个具体的 js 模块； require（引用模块） 每一个实现了 CommonJS 规范的模块，必须定义一个 require() 函数，使用这个 require 函数，就能够 很方便的导入其它 模块中的成员，供自己使用； exports（暴露模块成员） 每一个模块中，如果想要把自己的一些私有成员，暴露给别人使用，那么，必须实现一个 exports 对象，通过exports对象，可以方便的把模块内私有的成员，暴露给外界使用； 3 module.exports 和 exports 的关系 module.exports 和 exports 默认引用了同一个空对象； module.exports 和 exports 作用一致，都可以向外暴露成员； 一个模块作用域中，向外暴露私有成员时，永远以 module.exports 为准；]]></content>
      <categories>
        <category>node.js</category>
      </categories>
      <tags>
        <tag>node.js</tag>
        <tag>模块化</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vscode插件使用大全]]></title>
    <url>%2F2018%2F08%2F03%2Fvscode%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8%E5%A4%A7%E5%85%A8%2F</url>
    <content type="text"><![CDATA[vscodeVS Code（Visual Studio Code）是由微软研发的一款免费、开源的跨平台文本（代码）编辑器。前端开发几乎完美的编辑器。 推荐我所使用的插件 打开： open in browser浏览器打开文件，快捷键：alt+b 或右键打开 自动刷新–&gt;Live Server右键打开或终端打开，local host：5500选择文件，自动刷新。 样式类： Bracket Pair Colorizer括号高亮显示 change-case清洁代码，普通文本一键转换包括驼峰命名、下划线分隔命名，snake_case 命名以及 CONST_CAS 命名等。 Color Infocss样式颜色提示，可以自动选择颜色。鼠标停留就可以预览色块中色彩模型的（HEX、 RGB、HSL 和 CMYK）相关信息了。 GlassIt-VSC使vscode软件整体变透明的插件，包括背景，字体，透明度可以调节。ctrl+alt+z透明，ctrl+alt+c恢复正常。我自己特别喜欢，把vscode放在浏览器上面，配合自动保存，和自动刷新，只要一改代码，就立马能看见效果。主题：我最喜欢的三个： One Dark Pro 黑色背景 很舒服。 high contrast 黑色背景 高对比度，配合背景透明，调到很低也很清晰。 light 白色背景 也很清晰。不适合配合透明。 代码提示： intelliSense for CSS class names in HTML把项目中link引用的 css 文件内里的名称智能提示在 html 中。 jQuery Code SnippetsjQuery代码提示。例如：jqajax–&gt;自动生成ajax样式 JavaScript (ES6) snippetsJavaScript (ES6) 代码提示。 SQL Server (mssql)sql语句代码提示。 ExpressJs 4 Snippets用于VS Code的ExpressJs 4代码段。 Veturvue 代码提示。 Vue 2 SnippetsVue 2 代码段。 Bootstrap 4, Font awesome 4, Font Awesome 5 Free &amp; Pro snippetsBootstrap 4代码提示片段。 工具类： 自动保存vscode 自带功能，选项栏： 文件–&gt;选择自动保存 vscode-pdfvscode中打开pdf格式文档。 Image Preview鼠标移到路径里显示图像预览。 Easy LESSless格式语法自动转换相对应css文件，方便引用。 htmltagwrap在选中HTML标签中外面套一层别的标签 “Alt + W” 。 Auto Rename Tag 自动重命名标签，关联使用，更改开始标签，结束标签同时更改。 Path Intellisense路径补全。 功能类： Chinese (Simplified) Language Pack for Visual Studio Code简体中文版。 Prettier - Code formatter代码格式化软件，支持：html，css，js，json，php，nodejs、等，强烈推荐！使用方式： · CMD + Shift + P -&gt; Format Document · 重新绑定editor.action.formatDocument，在editor.action.formatSelection在vscode的键盘快捷键菜单。 CSS Peek追踪至样式表中 CSS 类和 ids 定义的地方。当你在 HTML 文件中右键单击选择器时，选择“ Go to Definition 和 Peek definition ”选项，它便会给你发送样式设置的 CSS 代码。 vue-peek同css peek，追踪 vue定义的地方。 ESLint在团队协作中，为避免低级 Bug、产出风格统一的代码，公司会预先制定编码规范。EsLint帮助我们检查Javascript编程时的语法错误。比如：在Javascript应用中，你很难找到你漏泄的变量或者方法。EsLint能够帮助我们分析JS代码，找到bug并确保一定程度的JS语法书写的正确性。具体安装教程，借鉴：https://blog.csdn.net/walid1992/article/details/54633760?utm_source=blogxgwz0 总结以上都是亲自使用过的，强烈推荐哦~~~]]></content>
      <categories>
        <category>工具类</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>插件</tag>
        <tag>vscode</tag>
      </tags>
  </entry>
</search>
